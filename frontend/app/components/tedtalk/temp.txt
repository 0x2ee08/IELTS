'use client'

import React, { useState } from 'react'

const YOUR_API_KEY = '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'
const ChatBox = () => {
    const [messages, setMessages] = useState<string[]>([])
    const [input, setInput] = useState('')
    const [error, setError] = useState('')

    const handleReply = async (message: string) => {
        try {
            const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
                method: "POST",
                headers: {
                    "Authorization": `Bearer ${YOUR_API_KEY}`,
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    "model": "google/gemma-2-9b-it:free",
                    "messages": [
                        { "role": "user", "content": message },
                    ],
                })
            })

            if (!response.ok) {
                const err = await response.json()
                throw new Error(`HTTP error! Status: ${response.status}, Message: ${err.message}`)
            }

            const data = await response.json()
            const messageContent = data.choices[0]?.message?.content || 'No content available'
            return messageContent
        } catch (error) {
            console.error('Fetch error:', error)
            setError(`An error occurred: ` + error)
            return 'An error occurred, please try again.'
        }
    }
    
    const handleSendMessage = async () => {
        if (input.trim() !== '') {
            const userMessage = `You: ${input.trim()}`
            setMessages([...messages, userMessage]) 
            setInput('') 

            const botReply = await handleReply(input.trim())
            setMessages((prevMessages) => [...prevMessages, `Bot: ${botReply}`])
        }
    }

    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        setInput(event.target.value)
    }

    const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {
        if (event.key === 'Enter') {
            handleSendMessage()
        }
    }

    return (
        <div style={{ 
            position: 'fixed', 
            top: 0, 
            left: 0, 
            width: '100vw', 
            height: '100vh', 
            backgroundColor: '#f7f7f7', 
            color: '#333', 
            display: 'flex', 
            flexDirection: 'column', 
            justifyContent: 'space-between', 
            padding: '20px', 
            boxSizing: 'border-box' 
        }}>
            <div style={{ 
                flexGrow: 1, 
                overflowY: 'auto', 
                border: '1px solid #ccc', 
                padding: '10px', 
                backgroundColor: '#fff', 
                borderRadius: '4px' 
            }}>
                {messages.map((message, index) => (
                    <div key={index} style={{ margin: '5px 0' }}>
                        {message}
                    </div>
                ))}
            </div>
            <div style={{ marginTop: '10px', display: 'flex', alignItems: 'center' }}>
                <input 
                    type="text"
                    value={input}
                    onChange={handleInputChange}
                    onKeyPress={handleKeyPress}
                    placeholder='Your message here'
                    style={{ 
                        flexGrow: 1, 
                        padding: '10px', 
                        marginRight: '10px', 
                        borderRadius: '4px', 
                        border: '1px solid #ccc', 
                        backgroundColor: '#fff' 
                    }}
                />
                <button
                    onClick={handleSendMessage}
                    style={{ 
                        padding: '10px 20px', 
                        borderRadius: '4px', 
                        border: 'none', 
                        backgroundColor: '#4CAF50', 
                        color: 'white' 
                    }}
                >
                    Send
                </button>
            </div>
            {error && <div style={{ color: 'red', marginTop: '10px' }}>{error}</div>}
        </div>
    )
}

export default ChatBox